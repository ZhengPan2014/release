# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cob_light/LightModes.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class LightModes(genpy.Message):
  _md5sum = "a8bc2f81613e751ed7ec7ea0d8d7e7f4"
  _type = "cob_light/LightModes"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 NONE =           0           # will turn everything off
uint8 STATIC =         1           # will change the LEDs to "color"
uint8 FLASH =          2           # will change the LEDs frequently with "frequency" from "color" to black
uint8 BREATH =         3           # will change the LEDs smoothly with "frequency" from "color" to black
uint8 BREATH_COLOR =   4           # will change the LEDs smoothly with "frequency" from "color" to black
                                   # and flips color in time
uint8 FADE_COLOR =     5           # will fade the colors in rainbow
uint8 SEQ =            6           # executes one sequence after another as defined in sequences array
uint8 CIRCLE_COLORS =  7           # circle through specific colors, if one color is set only one color will circle
                                   # if more than one color is set, that this colors will circle through
uint8 SWEEP =          8           # circle color from front to back on both sides
uint8 DIST_APPROX =    9           # color led circle from green to red depended on the measured laserscan dists
uint8 GLOW =          10           # glow the color
uint8 XMAS =          11           # red white christmas mode
"""
  # Pseudo-constants
  NONE = 0
  STATIC = 1
  FLASH = 2
  BREATH = 3
  BREATH_COLOR = 4
  FADE_COLOR = 5
  SEQ = 6
  CIRCLE_COLORS = 7
  SWEEP = 8
  DIST_APPROX = 9
  GLOW = 10
  XMAS = 11

  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LightModes, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
