# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cob_light/LightMode.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import cob_light.msg
import std_msgs.msg

class LightMode(genpy.Message):
  _md5sum = "7aecb45b0da2ee8d387f2bec4ee2faf9"
  _type = "cob_light/LightMode"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 mode                         # mode to switch on

float32                frequency   # in Hz
float32                timeout     # in s, requested mode will be executed for max timeout s.
                                   # default is 0 and means no timeout.
int32                  pulses      # specifies the amount of pulses which will be executed.
                                   # eg: mode = flash, pulses = 2. Means the light will flash two times
int8                   priority    # priority [-20,20] default = 0. Modes with same or higher priorities will
                                   # be executed.
std_msgs/ColorRGBA[]   colors      # array of colors.
                                   # size > 1: each color represent one led (size should match the amount of leds)
                                   # size = 1: one color for all leds or color for specific mode
                                   # size = 0: undefined
cob_light/Sequence[]   sequences   # an array of sequence definitions, used only if mode is set to SEQ

================================================================================
MSG: std_msgs/ColorRGBA
float32 r
float32 g
float32 b
float32 a

================================================================================
MSG: cob_light/Sequence
std_msgs/ColorRGBA   color       #sequence color
float32              hold_time   #time how long the color should be hold [s]
float32              cross_time  #time how long it take to fade to this color [s]"""
  __slots__ = ['mode','frequency','timeout','pulses','priority','colors','sequences']
  _slot_types = ['uint8','float32','float32','int32','int8','std_msgs/ColorRGBA[]','cob_light/Sequence[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mode,frequency,timeout,pulses,priority,colors,sequences

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LightMode, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.mode is None:
        self.mode = 0
      if self.frequency is None:
        self.frequency = 0.
      if self.timeout is None:
        self.timeout = 0.
      if self.pulses is None:
        self.pulses = 0
      if self.priority is None:
        self.priority = 0
      if self.colors is None:
        self.colors = []
      if self.sequences is None:
        self.sequences = []
    else:
      self.mode = 0
      self.frequency = 0.
      self.timeout = 0.
      self.pulses = 0
      self.priority = 0
      self.colors = []
      self.sequences = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_B2fib.pack(_x.mode, _x.frequency, _x.timeout, _x.pulses, _x.priority))
      length = len(self.colors)
      buff.write(_struct_I.pack(length))
      for val1 in self.colors:
        _x = val1
        buff.write(_struct_4f.pack(_x.r, _x.g, _x.b, _x.a))
      length = len(self.sequences)
      buff.write(_struct_I.pack(length))
      for val1 in self.sequences:
        _v1 = val1.color
        _x = _v1
        buff.write(_struct_4f.pack(_x.r, _x.g, _x.b, _x.a))
        _x = val1
        buff.write(_struct_2f.pack(_x.hold_time, _x.cross_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.colors is None:
        self.colors = None
      if self.sequences is None:
        self.sequences = None
      end = 0
      _x = self
      start = end
      end += 14
      (_x.mode, _x.frequency, _x.timeout, _x.pulses, _x.priority,) = _struct_B2fib.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.colors = []
      for i in range(0, length):
        val1 = std_msgs.msg.ColorRGBA()
        _x = val1
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _struct_4f.unpack(str[start:end])
        self.colors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sequences = []
      for i in range(0, length):
        val1 = cob_light.msg.Sequence()
        _v2 = val1.color
        _x = _v2
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _struct_4f.unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.hold_time, _x.cross_time,) = _struct_2f.unpack(str[start:end])
        self.sequences.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_B2fib.pack(_x.mode, _x.frequency, _x.timeout, _x.pulses, _x.priority))
      length = len(self.colors)
      buff.write(_struct_I.pack(length))
      for val1 in self.colors:
        _x = val1
        buff.write(_struct_4f.pack(_x.r, _x.g, _x.b, _x.a))
      length = len(self.sequences)
      buff.write(_struct_I.pack(length))
      for val1 in self.sequences:
        _v3 = val1.color
        _x = _v3
        buff.write(_struct_4f.pack(_x.r, _x.g, _x.b, _x.a))
        _x = val1
        buff.write(_struct_2f.pack(_x.hold_time, _x.cross_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.colors is None:
        self.colors = None
      if self.sequences is None:
        self.sequences = None
      end = 0
      _x = self
      start = end
      end += 14
      (_x.mode, _x.frequency, _x.timeout, _x.pulses, _x.priority,) = _struct_B2fib.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.colors = []
      for i in range(0, length):
        val1 = std_msgs.msg.ColorRGBA()
        _x = val1
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _struct_4f.unpack(str[start:end])
        self.colors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sequences = []
      for i in range(0, length):
        val1 = cob_light.msg.Sequence()
        _v4 = val1.color
        _x = _v4
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _struct_4f.unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.hold_time, _x.cross_time,) = _struct_2f.unpack(str[start:end])
        self.sequences.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4f = struct.Struct("<4f")
_struct_B2fib = struct.Struct("<B2fib")
_struct_2f = struct.Struct("<2f")
