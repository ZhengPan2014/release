// Generated by gencpp from file task_manager/Task.msg
// DO NOT EDIT!


#ifndef TASK_MANAGER_MESSAGE_TASK_H
#define TASK_MANAGER_MESSAGE_TASK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace task_manager
{
template <class ContainerAllocator>
struct Task_
{
  typedef Task_<ContainerAllocator> Type;

  Task_()
    : header()
    , name()
    , address(0)
    , trajectory()
    , enable_expect()
    , disable_expect()
    , priority(0)  {
    }
  Task_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , name(_alloc)
    , address(0)
    , trajectory(_alloc)
    , enable_expect(_alloc)
    , disable_expect(_alloc)
    , priority(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef int32_t _address_type;
  _address_type address;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _trajectory_type;
  _trajectory_type trajectory;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _enable_expect_type;
  _enable_expect_type enable_expect;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _disable_expect_type;
  _disable_expect_type disable_expect;

   typedef int8_t _priority_type;
  _priority_type priority;




  typedef boost::shared_ptr< ::task_manager::Task_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::task_manager::Task_<ContainerAllocator> const> ConstPtr;

}; // struct Task_

typedef ::task_manager::Task_<std::allocator<void> > Task;

typedef boost::shared_ptr< ::task_manager::Task > TaskPtr;
typedef boost::shared_ptr< ::task_manager::Task const> TaskConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::task_manager::Task_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::task_manager::Task_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace task_manager

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'task_manager': ['/home/ouiyeah/catkin_ws/src/hitrobot/task_manager/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::task_manager::Task_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::task_manager::Task_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::task_manager::Task_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::task_manager::Task_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::task_manager::Task_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::task_manager::Task_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::task_manager::Task_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e1c5de3b06f2e4e9bf0405fe00bb135c";
  }

  static const char* value(const ::task_manager::Task_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe1c5de3b06f2e4e9ULL;
  static const uint64_t static_value2 = 0xbf0405fe00bb135cULL;
};

template<class ContainerAllocator>
struct DataType< ::task_manager::Task_<ContainerAllocator> >
{
  static const char* value()
  {
    return "task_manager/Task";
  }

  static const char* value(const ::task_manager::Task_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::task_manager::Task_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
string name\n\
int32  address\n\
string trajectory\n\
string enable_expect\n\
string disable_expect\n\
int8  priority\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::task_manager::Task_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::task_manager::Task_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.name);
      stream.next(m.address);
      stream.next(m.trajectory);
      stream.next(m.enable_expect);
      stream.next(m.disable_expect);
      stream.next(m.priority);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Task_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::task_manager::Task_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::task_manager::Task_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "address: ";
    Printer<int32_t>::stream(s, indent + "  ", v.address);
    s << indent << "trajectory: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.trajectory);
    s << indent << "enable_expect: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.enable_expect);
    s << indent << "disable_expect: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.disable_expect);
    s << indent << "priority: ";
    Printer<int8_t>::stream(s, indent + "  ", v.priority);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TASK_MANAGER_MESSAGE_TASK_H
