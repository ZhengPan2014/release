// Generated by gencpp from file task_manager/TaskControl.msg
// DO NOT EDIT!


#ifndef TASK_MANAGER_MESSAGE_TASKCONTROL_H
#define TASK_MANAGER_MESSAGE_TASKCONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace task_manager
{
template <class ContainerAllocator>
struct TaskControl_
{
  typedef TaskControl_<ContainerAllocator> Type;

  TaskControl_()
    : control(0)
    , goal_name()  {
    }
  TaskControl_(const ContainerAllocator& _alloc)
    : control(0)
    , goal_name(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _control_type;
  _control_type control;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _goal_name_type;
  _goal_name_type goal_name;


    enum { STOP = 0 };
     enum { START = 1 };
     enum { PAUSE = 2 };
 

  typedef boost::shared_ptr< ::task_manager::TaskControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::task_manager::TaskControl_<ContainerAllocator> const> ConstPtr;

}; // struct TaskControl_

typedef ::task_manager::TaskControl_<std::allocator<void> > TaskControl;

typedef boost::shared_ptr< ::task_manager::TaskControl > TaskControlPtr;
typedef boost::shared_ptr< ::task_manager::TaskControl const> TaskControlConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::task_manager::TaskControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::task_manager::TaskControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace task_manager

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'task_manager': ['/home/ouiyeah/catkin_ws/src/hitrobot/task_manager/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::task_manager::TaskControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::task_manager::TaskControl_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::task_manager::TaskControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::task_manager::TaskControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::task_manager::TaskControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::task_manager::TaskControl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::task_manager::TaskControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f2ddf02b376d1d00aed5addfb5cfe0ba";
  }

  static const char* value(const ::task_manager::TaskControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf2ddf02b376d1d00ULL;
  static const uint64_t static_value2 = 0xaed5addfb5cfe0baULL;
};

template<class ContainerAllocator>
struct DataType< ::task_manager::TaskControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "task_manager/TaskControl";
  }

  static const char* value(const ::task_manager::TaskControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::task_manager::TaskControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# control the task execution\n\
int8 control\n\
\n\
int8 STOP  = 0\n\
int8 START = 1\n\
int8 PAUSE = 2\n\
\n\
# name of the task to be execute\n\
# leave empty, when stopping or pausing\n\
string goal_name\n\
";
  }

  static const char* value(const ::task_manager::TaskControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::task_manager::TaskControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.control);
      stream.next(m.goal_name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TaskControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::task_manager::TaskControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::task_manager::TaskControl_<ContainerAllocator>& v)
  {
    s << indent << "control: ";
    Printer<int8_t>::stream(s, indent + "  ", v.control);
    s << indent << "goal_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.goal_name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TASK_MANAGER_MESSAGE_TASKCONTROL_H
