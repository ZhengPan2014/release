// Generated by gencpp from file scheduling_msgs/QueryTaskStatus2Response.msg
// DO NOT EDIT!


#ifndef SCHEDULING_MSGS_MESSAGE_QUERYTASKSTATUS2RESPONSE_H
#define SCHEDULING_MSGS_MESSAGE_QUERYTASKSTATUS2RESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace scheduling_msgs
{
template <class ContainerAllocator>
struct QueryTaskStatus2Response_
{
  typedef QueryTaskStatus2Response_<ContainerAllocator> Type;

  QueryTaskStatus2Response_()
    : task_id(0)
    , agv_id(0)
    , loading_station()
    , unloading_sation()
    , status(0)
    , text()  {
    }
  QueryTaskStatus2Response_(const ContainerAllocator& _alloc)
    : task_id(0)
    , agv_id(0)
    , loading_station(_alloc)
    , unloading_sation(_alloc)
    , status(0)
    , text(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _task_id_type;
  _task_id_type task_id;

   typedef int32_t _agv_id_type;
  _agv_id_type agv_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _loading_station_type;
  _loading_station_type loading_station;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _unloading_sation_type;
  _unloading_sation_type unloading_sation;

   typedef int32_t _status_type;
  _status_type status;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _text_type;
  _text_type text;




  typedef boost::shared_ptr< ::scheduling_msgs::QueryTaskStatus2Response_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::scheduling_msgs::QueryTaskStatus2Response_<ContainerAllocator> const> ConstPtr;

}; // struct QueryTaskStatus2Response_

typedef ::scheduling_msgs::QueryTaskStatus2Response_<std::allocator<void> > QueryTaskStatus2Response;

typedef boost::shared_ptr< ::scheduling_msgs::QueryTaskStatus2Response > QueryTaskStatus2ResponsePtr;
typedef boost::shared_ptr< ::scheduling_msgs::QueryTaskStatus2Response const> QueryTaskStatus2ResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::scheduling_msgs::QueryTaskStatus2Response_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::scheduling_msgs::QueryTaskStatus2Response_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace scheduling_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'scheduling_msgs': ['/home/ouiyeah/catkin_ws/src/hitrobot/scheduling_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'nav_msgs': ['/opt/ros/indigo/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::scheduling_msgs::QueryTaskStatus2Response_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scheduling_msgs::QueryTaskStatus2Response_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scheduling_msgs::QueryTaskStatus2Response_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scheduling_msgs::QueryTaskStatus2Response_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scheduling_msgs::QueryTaskStatus2Response_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scheduling_msgs::QueryTaskStatus2Response_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::scheduling_msgs::QueryTaskStatus2Response_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d46becfbb488a2ba12d9dd07a5433a2d";
  }

  static const char* value(const ::scheduling_msgs::QueryTaskStatus2Response_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd46becfbb488a2baULL;
  static const uint64_t static_value2 = 0x12d9dd07a5433a2dULL;
};

template<class ContainerAllocator>
struct DataType< ::scheduling_msgs::QueryTaskStatus2Response_<ContainerAllocator> >
{
  static const char* value()
  {
    return "scheduling_msgs/QueryTaskStatus2Response";
  }

  static const char* value(const ::scheduling_msgs::QueryTaskStatus2Response_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::scheduling_msgs::QueryTaskStatus2Response_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 task_id\n\
int32 agv_id\n\
string loading_station\n\
string unloading_sation\n\
int32 status\n\
string text\n\
\n\
";
  }

  static const char* value(const ::scheduling_msgs::QueryTaskStatus2Response_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::scheduling_msgs::QueryTaskStatus2Response_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.task_id);
      stream.next(m.agv_id);
      stream.next(m.loading_station);
      stream.next(m.unloading_sation);
      stream.next(m.status);
      stream.next(m.text);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct QueryTaskStatus2Response_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::scheduling_msgs::QueryTaskStatus2Response_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::scheduling_msgs::QueryTaskStatus2Response_<ContainerAllocator>& v)
  {
    s << indent << "task_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.task_id);
    s << indent << "agv_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.agv_id);
    s << indent << "loading_station: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.loading_station);
    s << indent << "unloading_sation: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.unloading_sation);
    s << indent << "status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.status);
    s << indent << "text: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.text);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SCHEDULING_MSGS_MESSAGE_QUERYTASKSTATUS2RESPONSE_H
