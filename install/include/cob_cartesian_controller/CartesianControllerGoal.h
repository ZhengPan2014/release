// Generated by gencpp from file cob_cartesian_controller/CartesianControllerGoal.msg
// DO NOT EDIT!


#ifndef COB_CARTESIAN_CONTROLLER_MESSAGE_CARTESIANCONTROLLERGOAL_H
#define COB_CARTESIAN_CONTROLLER_MESSAGE_CARTESIANCONTROLLERGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <cob_cartesian_controller/MoveLin.h>
#include <cob_cartesian_controller/MoveCirc.h>
#include <cob_cartesian_controller/Profile.h>

namespace cob_cartesian_controller
{
template <class ContainerAllocator>
struct CartesianControllerGoal_
{
  typedef CartesianControllerGoal_<ContainerAllocator> Type;

  CartesianControllerGoal_()
    : move_type(0)
    , move_lin()
    , move_circ()
    , profile()  {
    }
  CartesianControllerGoal_(const ContainerAllocator& _alloc)
    : move_type(0)
    , move_lin(_alloc)
    , move_circ(_alloc)
    , profile(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _move_type_type;
  _move_type_type move_type;

   typedef  ::cob_cartesian_controller::MoveLin_<ContainerAllocator>  _move_lin_type;
  _move_lin_type move_lin;

   typedef  ::cob_cartesian_controller::MoveCirc_<ContainerAllocator>  _move_circ_type;
  _move_circ_type move_circ;

   typedef  ::cob_cartesian_controller::Profile_<ContainerAllocator>  _profile_type;
  _profile_type profile;


    enum { LIN = 1u };
     enum { CIRC = 2u };
 

  typedef boost::shared_ptr< ::cob_cartesian_controller::CartesianControllerGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_cartesian_controller::CartesianControllerGoal_<ContainerAllocator> const> ConstPtr;

}; // struct CartesianControllerGoal_

typedef ::cob_cartesian_controller::CartesianControllerGoal_<std::allocator<void> > CartesianControllerGoal;

typedef boost::shared_ptr< ::cob_cartesian_controller::CartesianControllerGoal > CartesianControllerGoalPtr;
typedef boost::shared_ptr< ::cob_cartesian_controller::CartesianControllerGoal const> CartesianControllerGoalConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cob_cartesian_controller::CartesianControllerGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cob_cartesian_controller::CartesianControllerGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace cob_cartesian_controller

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'cob_cartesian_controller': ['/home/ouiyeah/catkin_ws/devel/share/cob_cartesian_controller/msg', '/home/ouiyeah/catkin_ws/src/cob_control/cob_cartesian_controller/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::cob_cartesian_controller::CartesianControllerGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cob_cartesian_controller::CartesianControllerGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cob_cartesian_controller::CartesianControllerGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cob_cartesian_controller::CartesianControllerGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cob_cartesian_controller::CartesianControllerGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cob_cartesian_controller::CartesianControllerGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cob_cartesian_controller::CartesianControllerGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4991c8597bfb03ca23473e74f0163c3e";
  }

  static const char* value(const ::cob_cartesian_controller::CartesianControllerGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4991c8597bfb03caULL;
  static const uint64_t static_value2 = 0x23473e74f0163c3eULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_cartesian_controller::CartesianControllerGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cob_cartesian_controller/CartesianControllerGoal";
  }

  static const char* value(const ::cob_cartesian_controller::CartesianControllerGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cob_cartesian_controller::CartesianControllerGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# goal definition\n\
uint8 LIN=1\n\
uint8 CIRC=2\n\
uint8 move_type\n\
\n\
cob_cartesian_controller/MoveLin move_lin\n\
cob_cartesian_controller/MoveCirc move_circ\n\
cob_cartesian_controller/Profile profile\n\
\n\
================================================================================\n\
MSG: cob_cartesian_controller/MoveLin\n\
geometry_msgs/Pose pose_goal\n\
string frame_id\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: cob_cartesian_controller/MoveCirc\n\
geometry_msgs/Pose pose_center\n\
string frame_id\n\
\n\
float64 start_angle\n\
float64 end_angle\n\
float64 radius\n\
================================================================================\n\
MSG: cob_cartesian_controller/Profile\n\
uint8 RAMP=1\n\
uint8 SINOID=2\n\
uint8 profile_type\n\
\n\
float64 vel\n\
float64 accl\n\
";
  }

  static const char* value(const ::cob_cartesian_controller::CartesianControllerGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cob_cartesian_controller::CartesianControllerGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.move_type);
      stream.next(m.move_lin);
      stream.next(m.move_circ);
      stream.next(m.profile);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CartesianControllerGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cob_cartesian_controller::CartesianControllerGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cob_cartesian_controller::CartesianControllerGoal_<ContainerAllocator>& v)
  {
    s << indent << "move_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.move_type);
    s << indent << "move_lin: ";
    s << std::endl;
    Printer< ::cob_cartesian_controller::MoveLin_<ContainerAllocator> >::stream(s, indent + "  ", v.move_lin);
    s << indent << "move_circ: ";
    s << std::endl;
    Printer< ::cob_cartesian_controller::MoveCirc_<ContainerAllocator> >::stream(s, indent + "  ", v.move_circ);
    s << indent << "profile: ";
    s << std::endl;
    Printer< ::cob_cartesian_controller::Profile_<ContainerAllocator> >::stream(s, indent + "  ", v.profile);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COB_CARTESIAN_CONTROLLER_MESSAGE_CARTESIANCONTROLLERGOAL_H
