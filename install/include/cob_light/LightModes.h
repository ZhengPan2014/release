// Generated by gencpp from file cob_light/LightModes.msg
// DO NOT EDIT!


#ifndef COB_LIGHT_MESSAGE_LIGHTMODES_H
#define COB_LIGHT_MESSAGE_LIGHTMODES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cob_light
{
template <class ContainerAllocator>
struct LightModes_
{
  typedef LightModes_<ContainerAllocator> Type;

  LightModes_()
    {
    }
  LightModes_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }




    enum { NONE = 0u };
     enum { STATIC = 1u };
     enum { FLASH = 2u };
     enum { BREATH = 3u };
     enum { BREATH_COLOR = 4u };
     enum { FADE_COLOR = 5u };
     enum { SEQ = 6u };
     enum { CIRCLE_COLORS = 7u };
     enum { SWEEP = 8u };
     enum { DIST_APPROX = 9u };
     enum { GLOW = 10u };
     enum { XMAS = 11u };
 

  typedef boost::shared_ptr< ::cob_light::LightModes_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_light::LightModes_<ContainerAllocator> const> ConstPtr;

}; // struct LightModes_

typedef ::cob_light::LightModes_<std::allocator<void> > LightModes;

typedef boost::shared_ptr< ::cob_light::LightModes > LightModesPtr;
typedef boost::shared_ptr< ::cob_light::LightModes const> LightModesConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cob_light::LightModes_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cob_light::LightModes_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace cob_light

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'cob_light': ['/home/ouiyeah/catkin_ws/src/cob_driver/cob_light/msg', '/home/ouiyeah/catkin_ws/devel/share/cob_light/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::cob_light::LightModes_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cob_light::LightModes_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cob_light::LightModes_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cob_light::LightModes_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cob_light::LightModes_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cob_light::LightModes_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cob_light::LightModes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a8bc2f81613e751ed7ec7ea0d8d7e7f4";
  }

  static const char* value(const ::cob_light::LightModes_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa8bc2f81613e751eULL;
  static const uint64_t static_value2 = 0xd7ec7ea0d8d7e7f4ULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_light::LightModes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cob_light/LightModes";
  }

  static const char* value(const ::cob_light::LightModes_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cob_light::LightModes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 NONE =           0           # will turn everything off\n\
uint8 STATIC =         1           # will change the LEDs to \"color\"\n\
uint8 FLASH =          2           # will change the LEDs frequently with \"frequency\" from \"color\" to black\n\
uint8 BREATH =         3           # will change the LEDs smoothly with \"frequency\" from \"color\" to black\n\
uint8 BREATH_COLOR =   4           # will change the LEDs smoothly with \"frequency\" from \"color\" to black\n\
                                   # and flips color in time\n\
uint8 FADE_COLOR =     5           # will fade the colors in rainbow\n\
uint8 SEQ =            6           # executes one sequence after another as defined in sequences array\n\
uint8 CIRCLE_COLORS =  7           # circle through specific colors, if one color is set only one color will circle\n\
                                   # if more than one color is set, that this colors will circle through\n\
uint8 SWEEP =          8           # circle color from front to back on both sides\n\
uint8 DIST_APPROX =    9           # color led circle from green to red depended on the measured laserscan dists\n\
uint8 GLOW =          10           # glow the color\n\
uint8 XMAS =          11           # red white christmas mode\n\
";
  }

  static const char* value(const ::cob_light::LightModes_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cob_light::LightModes_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LightModes_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cob_light::LightModes_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::cob_light::LightModes_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // COB_LIGHT_MESSAGE_LIGHTMODES_H
