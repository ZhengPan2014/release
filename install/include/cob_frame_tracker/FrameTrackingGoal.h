// Generated by gencpp from file cob_frame_tracker/FrameTrackingGoal.msg
// DO NOT EDIT!


#ifndef COB_FRAME_TRACKER_MESSAGE_FRAMETRACKINGGOAL_H
#define COB_FRAME_TRACKER_MESSAGE_FRAMETRACKINGGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cob_frame_tracker
{
template <class ContainerAllocator>
struct FrameTrackingGoal_
{
  typedef FrameTrackingGoal_<ContainerAllocator> Type;

  FrameTrackingGoal_()
    : tracking_frame()
    , tracking_duration(0.0)
    , stop_on_goal(false)  {
    }
  FrameTrackingGoal_(const ContainerAllocator& _alloc)
    : tracking_frame(_alloc)
    , tracking_duration(0.0)
    , stop_on_goal(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _tracking_frame_type;
  _tracking_frame_type tracking_frame;

   typedef double _tracking_duration_type;
  _tracking_duration_type tracking_duration;

   typedef uint8_t _stop_on_goal_type;
  _stop_on_goal_type stop_on_goal;




  typedef boost::shared_ptr< ::cob_frame_tracker::FrameTrackingGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_frame_tracker::FrameTrackingGoal_<ContainerAllocator> const> ConstPtr;

}; // struct FrameTrackingGoal_

typedef ::cob_frame_tracker::FrameTrackingGoal_<std::allocator<void> > FrameTrackingGoal;

typedef boost::shared_ptr< ::cob_frame_tracker::FrameTrackingGoal > FrameTrackingGoalPtr;
typedef boost::shared_ptr< ::cob_frame_tracker::FrameTrackingGoal const> FrameTrackingGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cob_frame_tracker::FrameTrackingGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cob_frame_tracker::FrameTrackingGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace cob_frame_tracker

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'cob_frame_tracker': ['/home/ouiyeah/catkin_ws/devel/share/cob_frame_tracker/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::cob_frame_tracker::FrameTrackingGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cob_frame_tracker::FrameTrackingGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cob_frame_tracker::FrameTrackingGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cob_frame_tracker::FrameTrackingGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cob_frame_tracker::FrameTrackingGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cob_frame_tracker::FrameTrackingGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cob_frame_tracker::FrameTrackingGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1f45d520be90e58935a41f5719d09f2e";
  }

  static const char* value(const ::cob_frame_tracker::FrameTrackingGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1f45d520be90e589ULL;
  static const uint64_t static_value2 = 0x35a41f5719d09f2eULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_frame_tracker::FrameTrackingGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cob_frame_tracker/FrameTrackingGoal";
  }

  static const char* value(const ::cob_frame_tracker::FrameTrackingGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cob_frame_tracker::FrameTrackingGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
## goal definition\n\
\n\
# frame to track\n\
string tracking_frame\n\
\n\
# max time to track\n\
float64 tracking_duration\n\
\n\
# stop tracking when goal is reached?\n\
bool stop_on_goal\n\
\n\
";
  }

  static const char* value(const ::cob_frame_tracker::FrameTrackingGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cob_frame_tracker::FrameTrackingGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tracking_frame);
      stream.next(m.tracking_duration);
      stream.next(m.stop_on_goal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FrameTrackingGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cob_frame_tracker::FrameTrackingGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cob_frame_tracker::FrameTrackingGoal_<ContainerAllocator>& v)
  {
    s << indent << "tracking_frame: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.tracking_frame);
    s << indent << "tracking_duration: ";
    Printer<double>::stream(s, indent + "  ", v.tracking_duration);
    s << indent << "stop_on_goal: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stop_on_goal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COB_FRAME_TRACKER_MESSAGE_FRAMETRACKINGGOAL_H
