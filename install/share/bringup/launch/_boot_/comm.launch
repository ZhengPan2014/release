<?xml version="1.0"?>
<launch>
    <arg name="is_client" default="false"/>
    <arg name="robot_pose_ekf" default="false"/>
    <arg name="ekf_localization" default="true"/>

    <node name="base_footprint" pkg="tf_broadcaster" type="tf_broadcaster" output="screen">
        <rosparam>
            frame_id: base_footprint
            z: 0.05
        </rosparam>
    </node>

    <include if="$(arg is_client)" file="$(find multimaster)/launch/master.launch">
        <arg name="master" value="hitrobot-forklift-server" />
    </include>

    <node name="map_server" pkg="map_server" type="map_server" args="$(find bringup)/param/map.yaml"/>

    <node name="map_edit_server" pkg="map_server" type="map_server" args="$(find bringup)/param/map_edit.yaml">
        <remap from="map" to="map_edit"/>
    </node>

    <node name ="map_transport" pkg="map_transport" type="map_transport_node" output="screen"/>

    <node name="waypoint_provider" pkg="yocs_waypoint_provider" type="waypoint_provider" output="screen" unless="$(arg is_client)">
        <param name="filename" value="$(find bringup)/param/waypoints.yaml"/>
    </node>

    <node name="waypoints_navi" pkg="yocs_waypoints_navi" type="yocs_waypoints_navi_node" output="screen"/>

    <node name="laser_scan_matcher" pkg="laser_scan_matcher" type="laser_scan_matcher_node" output="screen">
        <remap from="imu/data" to="imu_data"/>
        <remap from="pose_with_covariance_stamped" to="scan_matcher_pose"/>
        <rosparam>
            fixed_frame: odom
            base_frame: base_footprint
            use_imu: true
            use_odom: false
            publish_tf: false
            publish_pose: false
            publish_pose_with_covariance_stamped: true
            kf_dist_linear: 0.02 #0.1
            kf_dist_angular: 0.01 #0.1
            max_iterations: 10000
            max_correspondence_dist: 2.0
            max_angular_correction_deg: 10.0
            max_linear_correction: 0.2
            do_compute_covariance: 1
        </rosparam>
    </node>

    <node name="robot_pose_ekf" pkg="robot_pose_ekf" type="robot_pose_ekf" if="$(arg robot_pose_ekf)">
        <rosparam>
            output_frame: odom
            base_footprint_frame: base_footprint
            freq: 30.0
            sensor_timeout: 1.0
            odom_used: true
            imu_used: true
            vo_used: false
        </rosparam>
    </node>

    <node name="ekf_localization" pkg="robot_localization" type="ekf_localization_node" clear_params="true" if="$(arg ekf_localization)">
        <rosparam command="load" file="$(find bringup)/launch/forklift/ekf_csm.yaml" />
        <param name="pose0" value="scan_matcher_pose"/>
        <param name="imu0" value="imu_data"/>
    </node>

    <arg name="max_vel_x" default="0.55"/>
    <arg name="max_vel_theta" default="1.0"/>
    <arg name="xy_goal_tolerance" default="0.05"/>
    <arg name="yaw_goal_tolerance" default="0.05"/>
    <arg name="footprint" default="[[0.40, -0.33], [0.40, 0.33], [-0.40, 0.33], [-0.40, -0.33]]"/>
    <arg name="range_enabled" default="false"/>
    <arg name="range_topics" default="['/sonar_12oc', '/sonar_11oc', '/sonar_10oc', '/sonar_9oc', '/sonar_8oc', '/sonar_7oc', '/sonar_6oc', '/sonar_5oc', '/sonar_4oc', '/sonar_3oc', '/sonar_2oc', '/sonar_1oc']"/>

    <node name="amcl" pkg="amcl" type="amcl" output="screen">
        <rosparam>
            update_min_d: 0.1
            update_min_a: 0.2
            use_map_topic: true
            laser_model_type: likelihood_field
            odom_model_type: diff-corrected
            odom_alpha1: 0.005
            odom_alpha2: 0.005
            odom_alpha3: 0.2
            odom_alpha4: 0.005
            odom_alpha5: 0.005
        </rosparam>
    </node>

    <node name="move_base" pkg="move_base" type="move_base" output="screen">
        <remap from="odom" to="odometry/filtered"/>
        <rosparam>
            base_global_planner: "global_planner/MixedPlanner" <!--"navfn/NavfnROS"--> <!--"global_planner/FixedGlobalPlanner"--> 
            base_local_planner: "dwa_local_planner/DWAPlannerROS"<!--"teb_local_planner/TebLocalPlannerROS"-->
            recovery_behaviors:
              - name: 'conservative_reset'
                type: 'clear_costmap_recovery/ClearCostmapRecovery'
              - name: 'aggressive_reset'
                type: 'clear_costmap_recovery/ClearCostmapRecovery'
#              - name: 'straf_reset'
#                type: 'straf_recovery/StrafRecovery'
            conservative_reset:
                reset_distance: 0.0
                layer_names: [obstacle_layer]
            aggressive_reset:
                reset_distance: 0.0
                layer_names: [obstacle_layer]
            straf_reset:
                timeout: 10
            controller_frequency: 5.0
            planner_patience: 5.0
            controller_patience: 10.0
            oscillation_timeout: 5.0
            planner_frequency: 0.0
            max_planning_retries: 0
            global_costmap:
                global_frame: map
                robot_base_frame: base_footprint
                update_frequency: 1.0 #2.0
                publish_frequency: 0.5 #0.0
                static_map: true
                resolution: 0.05 #0.075
                plugins:
                  - name: static_layer
                    type: "costmap_2d::StaticLayer"
<!--                   - name: obstacle_layer
                    type: "costmap_2d::ObstacleLayer"
 -->                  - name: inflation_layer
                    type: "costmap_2d::InflationLayer"
                static_layer:
                    map_topic: map_edit
                obstacle_layer:
                    enable: false
                    observation_sources: scan_rectified_down scan_rectified
                    scan_rectified_down:
                        expected_update_rate: 5.0
                        data_type: LaserScan
                        clearing: true
                        marking: true
                        max_obstacle_height: 2.0
                        min_obstacle_height: 0.0
                        obstacle_range: 3.0
                        raytrace_range: 4.0
                        inf_is_valid: true
                    scan_rectified:
                        expected_update_rate: 5.0
                        data_type: LaserScan
                        clearing: true
                        marking: false
                        max_obstacle_height: 3.0
                        min_obstacle_height: -1.0
                        raytrace_range: 4.0
                        inf_is_valid: true
                inflation_layer:
                    inflation_radius: 2.0 #0.75
                    cost_scaling_factor: 5.0
                footprint_topic: footprint_setup
            local_costmap:
                global_frame: odom
                robot_base_frame: base_footprint
                transform_tolerance: 0.2 #0.5
                update_frequency: 5.0
                publish_frequency: 1.0 #0.0
                static_map: false
                rolling_window: true
                width: 6.0
                height: 6.0
                origin_x: -4.0
                origin_y: 0.05
                resolution: 0.05 #0.075 #0.025
                plugins:
                  - name: obstacle_layer
                    type: "costmap_2d::ObstacleLayer"
                  - name: inflation_layer
                    type: "costmap_2d::InflationLayer"
                obstacle_layer:
                    observation_sources: scan_rectified_down #scan_rectified
                    scan_rectified:
                        expected_update_rate: 5.0
                        data_type: LaserScan
                        clearing: true
                        max_obstacle_height: 3.0
                        min_obstacle_height: -1.0
                        inf_is_valid: true
                    scan_rectified_down:
                        expected_update_rate: 5.0
                        data_type: LaserScan
                        clearing: true
                        max_obstacle_height: 2.0
                        min_obstacle_height: 0.0
                        obstacle_range: 4.0
                        raytrace_range: 4.0
                        inf_is_valid: true
                    track_unknown_space: true
                    footprint_clearing_enabled: false
                inflation_layer:
                    inflation_radius: 2.0 #0.75
                    cost_scaling_factor: 5.0
                footprint_topic: footprint_setup
            GlobalPlanner:
                allow_unknown: false
            NavfnROS:
                allow_unknown: false
            FixedGlobalPlanner:
                allow_unknown: false
                subscribe_path_topic: specified_path
                endpoint_tolerance: 2.0
                retrace_path: true
                use_goal_direction: true
            MixedPlanner:
                endpoint_tolerance: 4.995
                fixed_planner:
                    endpoint_tolerance: 5.0
                navfn_planner:
                    planner_is_navfn: true
            TrajectoryPlannerROS:
                acc_lim_x: 0.5
                acc_lim_y: 0.0
                acc_lim_theta: 3.2
                min_vel_x: 0.1
                min_in_place_vel_theta: 0.2
                escape_vel: -0.1
                holonomic_robot: false
                yaw_goal_tolerance: 0.025
                xy_goal_tolerance: 0.05
                latch_xy_goal_tolerance: true
                meter_scoring: true
                occdist_scale: 0.5 #0.01
                heading_scoring: true
                dwa: true
                global_frame_id: odom
            DWAPlannerROS:
                acc_lim_x: 1.0
                acc_lim_y: 0.0
                acc_lim_theta: 2.0
                min_trans_vel: 0.05
                min_vel_x: 0.05
                max_vel_y: 0.0
                min_vel_y: 0.0
                min_rot_vel: 0.05
                forward_point_distance: 0.4
                yaw_goal_tolerance: 3.1416 #0.01
                xy_goal_tolerance: 2.0 #0.5
                latch_xy_goal_tolerance: true
                occdist_scale: 0.0
                path_distance_bias: 32.0 #64.0
                goal_distance_bias: 16.0
                vx_samples: 10
                vy_samples: 1
                vth_samples: 20
            <!-- TebLocalPlannerROS:
                acc_lim_x: 0.5
                acc_lim_theta: 3.2
                max_vel_x_backwards: 0.3 #0.2
                min_turning_radius: 0.001
                wheelbase: 1.555
                footprint_model:
                    type: "polygon"
                xy_goal_tolerance: 0.5 #0.2
                yaw_goal_tolerance: 0.025 #0.2
                free_goal_vel: false
                viapoints_all_candidates: false #true
                odom_topic: odometry/filtered
                map_frame: map -->
        </rosparam>
        
        <param name="TrajectoryPlannerROS/max_vel_x" value="$(arg max_vel_x)"/>
        <param name="DWAPlannerROS/max_trans_vel" value="$(arg max_vel_x)"/>
        <param name="DWAPlannerROS/max_vel_x" value="$(arg max_vel_x)"/>
        <!-- <param name="TebLocalPlannerROS/max_vel_x" value="$(arg max_vel_x)"/> -->
        <param name="TrajectoryPlannerROS/max_vel_theta" value="$(arg max_vel_theta)"/>
        <param name="TrajectoryPlannerROS/min_vel_theta" value="-$(arg max_vel_theta)"/>
        <param name="DWAPlannerROS/max_rot_vel" value="$(arg max_vel_theta)"/>
        <!-- <param name="TebLocalPlannerROS/max_vel_theta" value="$(arg max_vel_theta)"/> -->
        <param name="TrajectoryPlannerROS/xy_goal_tolerance" value="$(arg xy_goal_tolerance)"/>
        <param name="DWAPlannerROS/xy_goal_tolerance" value="$(arg xy_goal_tolerance)"/>
        <param name="TebLocalPlannerROS/xy_goal_tolerance" value="$(arg xy_goal_tolerance)"/>
        <param name="TrajectoryPlannerROS/yaw_goal_tolerance" value="$(arg yaw_goal_tolerance)"/>
        <param name="DWAPlannerROS/yaw_goal_tolerance" value="$(arg yaw_goal_tolerance)"/>
        <param name="TebLocalPlannerROS/yaw_goal_tolerance" value="$(arg yaw_goal_tolerance)"/>
        <param name="global_costmap/footprint" value="$(arg footprint)"/>
        <param name="local_costmap/footprint" value="$(arg footprint)"/>
        <!-- <param name="TebLocalPlannerROS/footprint_model/vertices" value="$(arg footprint)"/> -->
        <rosparam if="$(arg range_enabled)">
            aggressive_reset:
                reset_distance: 0.0
                layer_names: [obstacle_layer, range_sensor_layer]
            global_costmap:
                plugins:
                  - name: static_layer
                    type: "costmap_2d::StaticLayer"
                  - name: obstacle_layer
                    type: "costmap_2d::ObstacleLayer"
                  - name: range_sensor_layer
                    type: "range_sensor_layer::RangeSensorLayer"
                  - name: inflation_layer
                    type: "costmap_2d::InflationLayer"
                range_sensor_layer:
                    mark_threshold: 0.6
                    clear_on_max_reading: true
            local_costmap:
                plugins:
                  - name: obstacle_layer
                    type: "costmap_2d::ObstacleLayer"
                  - name: range_sensor_layer
                    type: "range_sensor_layer::RangeSensorLayer"
                  - name: inflation_layer
                    type: "costmap_2d::InflationLayer"
                range_sensor_layer:
                    mark_threshold: 0.6
                    clear_on_max_reading: true
        </rosparam>
        <param name="global_costmap/range_sensor_layer/range_topics" value="$(arg range_topics)"/>
        <param name="local_costmap/range_sensor_layer/range_topics" value="$(arg range_topics)"/>


        <rosparam file="$(find bringup)/launch/forklift/teb_local_planner_params_forklift.yaml" command="load" />
    </node>

    <node name="robot_pose_publisher" pkg="robot_pose_publisher" type="robot_pose_publisher" output="screen"/>

    <node name="rosbridge_shell" pkg="rosbridge_shell" type="rosbridge_shell" output="screen"/>

    <node name="rosbridge_rosapi" pkg="rosapi" type="rosapi_node" output="screen"/>

    <node name="rosbridge_tcp" pkg="rosbridge_server" type="rosbridge_tcp" output="screen">
        <rosparam>
            port: 7070
        </rosparam>
    </node>

    <node name="rosbridge_websocket" pkg="rosbridge_server" type="rosbridge_websocket" output="screen"/>

    <node name="tf2_web_republisher" pkg="tf2_web_republisher" type="tf2_web_republisher" output="screen"/>

    <node name="jsnode" pkg="joy" type="joy_node" />

    <node name="teleop_joystick" pkg="teleop_joystick" type="teleop_joystick" output="screen">
        <remap from="teleop_joystick/cmd_vel" to="cmd_vel"/>
        <remap from="teleop_joystick/joy" to="joy"/>
        <rosparam>
            linear_vel_base: 0.5
            angular_vel_base: 1.0
            micro_vel_factor: 0.1
        </rosparam>
    </node>

    <node name="teleop_keyboard" pkg="teleop_keyboard" type="teleop_keyboard" output="screen">
        <remap from="teleop_keyboard/cmd_vel" to="cmd_vel"/>
        <rosparam>
            linear_vel_base: 0.5
            angular_vel_base: 0.25
            micro_vel_factor: 0.1
        </rosparam>
    </node>

    <node name="diagnostic_aggregator" pkg="diagnostic_aggregator" type="aggregator_node" args="CPP" output="screen">
        <rosparam>
analyzers:
  device:
    type: diagnostic_aggregator/AnalyzerGroup
    path: device
    analyzers:
      odom_left:
        type: diagnostic_aggregator/GenericAnalyzer
        path: odom_l
        timeout: 5.0
        find_and_remove_prefix: left
        num_items: 2
      odom_right:
        type: diagnostic_aggregator/GenericAnalyzer
        path: odom_r
        timeout: 5.0
        find_and_remove_prefix: right
        num_items: 2
      joystick:
        type: diagnostic_aggregator/GenericAnalyzer
        path: 'joystick'
        timeout: 5.0
        startswith: ['Battery', 'Charging State', 'Connection', 'ps3_joy']
        remove_prefix: 'ps3_joy'
        </rosparam>
    </node>
</launch>
